<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ensoftener</name>
    </assembly>
    <members>
        <member name="T:Ensoftener.DirectX.ComputeShaderBase">
            <summary>A compute shader effect inherited from <seealso cref="T:SharpDX.Direct2D1.CustomEffectBase"/>. You can modify its input count, constant buffer and its nodes.</summary>
            <remarks><b>Requires EnsoftenerCpp32.dll or EnsoftenerCpp64.dll in to be put in your program directory.</b></remarks>
        </member>
        <member name="M:Ensoftener.DirectX.ComputeShaderBase.#ctor(System.Guid)">
            <summary>Initializes a new custom effect.</summary>
            <param name="guid">The GUID of the effect. Each GUID has one compute shader assigned to it.</param>
        </member>
        <member name="M:Ensoftener.DirectX.ComputeShaderBase.CalculateThreadgroups(SharpDX.Mathematics.Interop.RawRectangle)">
            <summary>The amount of tiles of the image to render. The tile size is specified by the [numthreads] attribute in the compute shader, in pixels.</summary>
            <remarks>If your tiles don't cover the whole image, only a portion of the image will render.</remarks>
        </member>
        <member name="T:Ensoftener.DirectX.GDX">
            <summary>The class containing everything necessary, from Direct2D components to new and useful DeviceContext methods.</summary>
        </member>
        <member name="F:Ensoftener.DirectX.GDX.BitmapProperties">
            <summary>The bitmap properties used for rendering. If you're creating a new bitmap, use these as a parameter.</summary>
        </member>
        <member name="P:Ensoftener.DirectX.GDX.FinalDC">
            <summary>The final device context that renders on screen, and the only one that uses byte color depth.</summary>
            <remarks>If you want to take a screenshot of the screen and convert it into a GDI bitmap, use <b><see cref="M:Ensoftener.DirectX.GDX.GetScreenCPURead(SharpDX.Direct2D1.DeviceContext,System.Nullable{SharpDX.Rectangle},System.Nullable{SharpDX.Point})"/></b> on this context
            for the fastest performance. If you were to convert any context from <b><see cref="P:Ensoftener.DirectX.GDX.Setups"/></b> to GDI, it would take much longer, as the other contexts use
            <b><see cref="F:SharpDX.DXGI.Format.R32G32B32A32_Float"/></b>. In that case, the library would cast every individual float from the screen to a byte,
            which takes about half a second. Since the final context's pixel format is <b><see cref="F:SharpDX.DXGI.Format.B8G8R8A8_UNorm"/></b>,
            it's the easiest and fastest to copy.</remarks>
        </member>
        <member name="P:Ensoftener.DirectX.GDX.SwapChainDescription">
            <summary><b><see cref="P:Ensoftener.DirectX.GDX.SwapChain"/></b>'s creation specs (in case you need them).</summary>
        </member>
        <member name="P:Ensoftener.DirectX.GDX.NextShader">
            <summary>A .cso file that will be loaded by every <b>pixel or compute shader</b> created from now on.
            One shader class can have different pixel shaders for every instance.</summary>
        </member>
        <member name="P:Ensoftener.DirectX.GDX.NextVertexShader">
            <summary>A .cso file that will be loaded by every <b>vertex shader</b> created from now on.
            One shader class can have different vertex shaders for every instance.</summary>
        </member>
        <member name="P:Ensoftener.DirectX.GDX.D2DFactory">
            <summary>The class used for registering your custom effects.</summary><remarks>Based on D2DDevice.</remarks>
        </member>
        <member name="P:Ensoftener.DirectX.GDX.D2DDevice">
            <remarks>Based on D3DDevice.</remarks>
        </member>
        <member name="P:Ensoftener.DirectX.GDX.D3DDevice">
            <remarks>Based either on a DXGIFactory or can be freely created.</remarks>
        </member>
        <member name="P:Ensoftener.DirectX.GDX.SwapChain">
            <remarks>Based on D3DDevice and a DXGIFactory.</remarks>
        </member>
        <member name="P:Ensoftener.DirectX.GDX.DWriteFactory">
            <summary>The class passed as a parameter when rendering text.</summary><remarks>Can be freely created.</remarks>
        </member>
        <member name="P:Ensoftener.DirectX.GDX.WICFactory">
            <summary>The class used for creating SVG's.</summary><remarks>Can be freely created.</remarks>
        </member>
        <member name="P:Ensoftener.DirectX.GDX.ExistingEffects">
            <summary>A list of all effects that were created.</summary> 
        </member>
        <member name="P:Ensoftener.DirectX.GDX.OutputSetup">
            <summary>The setup that will serve as the output and present its contents to the screen.</summary>
        </member>
        <member name="P:Ensoftener.DirectX.GDX.UpdateInputOnRender">
            <summary>Updates mouse+keyboard input in the main render thread. This is very important to look after, as updating input while another thread
            is running can have consequences if the other thread relies on this input.</summary>
        </member>
        <member name="E:Ensoftener.DirectX.GDX.RenderFinal">
            <summary>Runs after the render method ended and the output setup's contents were copied to the screen.</summary>
        </member>
        <member name="P:Ensoftener.DirectX.GDX.VSync">
            <summary>Tie the render method to the monitor's refresh rate. Turning VSync off runs the render method as fast as possible.</summary>
            <remarks>This is (partially) why updating game logic within the render method is a bad idea and why these should run in <see cref="P:Ensoftener.GShared.SideLoops"/>.</remarks>
        </member>
        <member name="P:Ensoftener.DirectX.GDX.NoVSyncSupported">
            <summary>The render method will be always tied to the monitor's refresh rate if false. (The <see cref="P:Ensoftener.DirectX.GDX.VSync"/> property will remain untouched.)</summary>
        </member>
        <member name="P:Ensoftener.DirectX.GDX.DrawingSetup.DC">
            <summary>The DeviceContext used for rendering everything, probably the most used class of them all.</summary><remarks>Based on D2DDevice.</remarks>
        </member>
        <member name="P:Ensoftener.DirectX.GDX.DrawingSetup.Bitmap">
            <summary>The render target of the DeviceContext. Any changes of the target will apply to the device context as well.</summary>
            <remarks>Based on DeviceContext.</remarks>
        </member>
        <member name="P:Ensoftener.DirectX.GDX.DrawingSetup.ResizeWithScreen">
            <summary>Set this context to be resizable with the screen.</summary>
        </member>
        <member name="P:Ensoftener.DirectX.GDX.DrawingSetup.UseOnlyOneTile">
            <summary>The context's tile size will be equal to the context's size. The setting will take effect after the window is moved or resized.</summary>
        </member>
        <member name="M:Ensoftener.DirectX.GDX.DrawingSetup.ApplySettings(System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>Changes settings of the setup and applies them. Set values to null to leave them as they are.</summary>
            <param name="resizeWithScreen">The <see cref="P:Ensoftener.DirectX.GDX.DrawingSetup.ResizeWithScreen"/> property.</param>
            <param name="oneTile">The <see cref="P:Ensoftener.DirectX.GDX.DrawingSetup.UseOnlyOneTile"/> property.</param>
        </member>
        <member name="M:Ensoftener.DirectX.GDX.DrawingSetup.#ctor(System.Nullable{SharpDX.Size2},System.Nullable{SharpDX.Size2},System.Boolean,System.Boolean,System.Boolean)">
            <summary>Adds a new rendering setup.</summary>
            <param name="size">The size of the context's target</param>
            <param name="tileSize">The <see cref="P:Ensoftener.DirectX.GDX.DrawingSetup.TileSize"/> property. By default it's 64Ã—64 or the window size if <paramref name="oneTile"/> is set to true.</param>
            <param name="resizeWithScreen">The <see cref="P:Ensoftener.DirectX.GDX.DrawingSetup.ResizeWithScreen"/> property.</param>
            <param name="oneTile">The <see cref="P:Ensoftener.DirectX.GDX.DrawingSetup.UseOnlyOneTile"/> property.</param>
            <param name="useFloats">Create the context with 32-bit float color depth (128bpp) instead of 8-bit byte color depth (32bpp).
            <br/><br/>Graphics-wise, floats are more useful, as they allow for colors to be "whiter than white" (or more than 1) and "blacker than black" (negative),
            which is useful for pixel shaders. <br/>Performance-wise, bytes are faster if you're converting to GDI bitmaps often, and require 4 times less memory.
            <br/>You won't need to use bytes unless you need to solve one of these two issues.</param>
        </member>
        <member name="P:Ensoftener.DirectX.GDX.DrawingSetup.TileSize">
            <summary>The maximum allowed size of tiles the shader will be split into.
            <b>The tiles will not use this exact size, but they will never exceed this size.</b></summary>
            <remarks>Setting the tile size both to a small amount or a large amount has disadvantages. Since texture coordinates in shaders are determined by tiles,
            the position in both pixel and compute shaders starts at the top left corner of each tile. Setting <see cref="P:Ensoftener.DirectX.GDX.DrawingSetup.UseOnlyOneTile"/> 
            to true solves this issue, but rendering shaders will be slower, as the GPU tries to render the whole image at once.</remarks>
        </member>
        <member name="M:Ensoftener.DirectX.GDX.DrawingSetup.RenderScreenShaders(System.Boolean,SharpDX.Direct2D1.Effect[])">
            <summary>Batch renders an array of effects applied to the entire screen.</summary>
            <param name="tileCorrection"></param>
            <param name="effects">The array of effects to render.</param>
        </member>
        <member name="M:Ensoftener.DirectX.GDX.Initialize(System.Int32,System.Boolean,System.Nullable{SharpDX.Size2},System.Boolean)">
            <summary>Creates all the stuff needed for a basic SharpDX setup. The first device (0th) will be set as output.</summary>
            <param name="parallelDevices">The amount of parallel Direct2D setups to create (for multirendering).
            All components will be accessible from their lists. Cannot be less than 1.</param>
            <param name="crashIfLag">Crashes if a shader takes more than 2 seconds to execute. Useful when testing out shaders with loops.</param>
            <param name="sizes">The default size of all device contexts, except for the outputting one. By default it's the window size.</param>
            <param name="legacySwapChain">Use a slower swapchain variant (copies before presenting to screen) for better backwards compatibility.</param>
        </member>
        <member name="M:Ensoftener.DirectX.GDX.Run(System.Action)">
            <summary>Starts displaying the window and runs the rendering loop.</summary>
            <param name="RenderMethod">The method that will be called on each monitor refresh.</param>
            <remarks><b>Do not use this for updating game logic!</b> The <b><paramref name="RenderMethod"/></b> is dependent on your monitor refresh rate (Hz),
            or instant if <b><see cref="P:Ensoftener.DirectX.GDX.VSync"/></b> is off. Instead, add a loop to <b><see cref="!:SideLoops"/></b> that runs at a fixed refresh rate.</remarks>
        </member>
        <member name="M:Ensoftener.DirectX.GDX.RemoveSetup(System.Int32)">
            <summary>Disposes of a setup and removes it from the lists.</summary>
        </member>
        <member name="M:Ensoftener.DirectX.GDX.Fullscreen(System.Boolean,System.Int32,System.Int32)">
            <summary>Spans the window over the entire screen. Leave size at 0 to upscale it to maximum or downscale it to last used size.</summary>
            <remarks>This is not a real "fullscreen", compared to <see cref="P:SharpDX.DXGI.SwapChain.IsFullScreen"/>. The swapchain method currently doesn't work.</remarks>
        </member>
        <member name="M:Ensoftener.DirectX.GDX.LoadBitmapFromFile(SharpDX.Direct2D1.DeviceContext,System.String)">
            <summary>Creates a SharpDX Bitmap off of an image file.</summary>
        </member>
        <member name="M:Ensoftener.DirectX.GDX.ConvertGDIToD2DBitmap(SharpDX.Direct2D1.DeviceContext,System.Drawing.Bitmap)">
            <summary>Creates a SharpDX Bitmap off of a GDI+ bitmap.</summary>
        </member>
        <member name="M:Ensoftener.DirectX.GDX.ToGDIBitmap(SharpDX.Direct2D1.Bitmap1)">
            <summary>Creates a GDI+ bitmap off of a SharpDX Bitmap. Very slow if using float colors.</summary>
            <remarks>If you're taking a screenshot, use <b><see cref="P:Ensoftener.DirectX.GDX.FinalDC"/></b> to get the final rendering result.
            <b><see cref="P:Ensoftener.DirectX.GDX.FinalDC"/></b> always uses byte colors, which means the screenshot process is fairly quick.</remarks>
        </member>
        <member name="M:Ensoftener.DirectX.GDX.GetScreenCPURead(SharpDX.Direct2D1.DeviceContext,System.Nullable{SharpDX.Rectangle},System.Nullable{SharpDX.Point})">
            <summary>Copies the device context's render target for further CPU processing (such as saving to a file).</summary>
            <returns>The render target's bitmap. Requires a newer version of DirectX and cannot be read by the GPU.</returns>
        </member>
        <member name="M:Ensoftener.DirectX.GDX.GetScreenGPURead(SharpDX.Direct2D1.DeviceContext,System.Nullable{SharpDX.Rectangle},System.Nullable{SharpDX.Point})">
            <summary>Copies the device context's render target for further GPU processing (such as shaders).</summary>
            <returns>The render target's bitmap. The bitmap cannot be read by the CPU.</returns>
        </member>
        <member name="M:Ensoftener.DirectX.GDX.ScreenRectangle(SharpDX.Direct2D1.DeviceContext)">
            <summary>Gets the device context's drawing rectangle.</summary>
        </member>
        <member name="M:Ensoftener.DirectX.GDX.SetMappedData``1(SharpDX.Direct2D1.VertexBuffer,System.Byte[],System.Int32,``0)">
            <summary>Sets the data of a vertex buffer after the <see cref="M:SharpDX.Direct2D1.VertexBuffer.Map(System.Byte[],System.Int32)"/> method has been called.</summary>
            <param name="originalData">The array received from the <see cref="M:SharpDX.Direct2D1.VertexBuffer.Map(System.Byte[],System.Int32)"/> method.</param>
            <param name="offset">The offset of the value to modify, in bytes.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Ensoftener.DirectX.GDX.GetMappedData``1(SharpDX.Direct2D1.VertexBuffer,System.Byte[],System.Int32)">
            <summary>Gets the data of a vertex buffer after the <see cref="M:SharpDX.Direct2D1.VertexBuffer.Map(System.Byte[],System.Int32)"/> method has been called.</summary>
            <param name="originalData">The array received from the <see cref="M:SharpDX.Direct2D1.VertexBuffer.Map(System.Byte[],System.Int32)"/> method.</param>
            <param name="offset">The offset of the value to modify, in bytes.</param>
        </member>
        <member name="T:Ensoftener.DirectX.GDX.SizableVertexBuffer">
            <summary>Like <see cref="T:Ensoftener.DirectX.GDX.SizableBuffer"/>, but more parallel for per-vertex editing and is compiled
            with flags <see cref="F:SharpDX.Direct3D11.BindFlags.VertexBuffer"/> and <see cref="F:SharpDX.Direct3D11.BindFlags.StreamOutput"/>.</summary>
        </member>
        <member name="P:Ensoftener.DirectX.GDX.SizableVertexBuffer.NumbersPerVertex">
            <summary>Amount of numbers to fit per vertex. A number is 4 bytes long, but 64-bit doubles can be spaced over two numbers.</summary>
        </member>
        <member name="M:Ensoftener.DirectX.GDX.SizableVertexBuffer.Compile3D(System.Boolean,SharpDX.Direct3D11.BindFlags,SharpDX.Direct3D11.CpuAccessFlags,SharpDX.Direct3D11.ResourceOptionFlags)">
            <summary>Compiles itself as a Direct3D vertex buffer. <b>Remember to dispose!</b></summary>
            <param name="dynamic">Allows editing the buffer after it was compiled (slower).</param>
            <param name="bind">Buffer usage flags. It's unlikely that a vertex buffer would serve as something else,
            but additionally, you may combine it with <see cref="F:SharpDX.Direct3D11.BindFlags.StreamOutput"/> for recycled usage.</param>
            <param name="access">Allows reading/writing to the buffer by the CPU.</param><param name="options">Additional options.</param>
        </member>
        <member name="M:Ensoftener.DirectX.GDX.SizableVertexBuffer.Compile3DAndSet(System.Int32,SharpDX.Direct3D.PrimitiveTopology,System.Boolean,SharpDX.Direct3D11.BindFlags,SharpDX.Direct3D11.CpuAccessFlags,SharpDX.Direct3D11.ResourceOptionFlags)">
            <summary>Compiles itself as a Direct3D vertex buffer and prepares itself for next drawing. <b>Remember to dispose!</b></summary>
            <param name="slot">The slot to bind the buffer to. Maximum is 16 or 32, whatever is supported in the current Direct3D level.</param>
            <param name="topology">Whether to render vertices as points, lines or triangles. Strips are clusters of triangles/lines connected together in their respective
            order, and "adjacent" means some vertices won't render and exist only as surroundings of the previous triangle/line (clockwise or counter-clockwise).</param>
            <param name="dynamic">Allows editing the buffer after it was compiled (slower).</param>
            <param name="bind">Buffer usage flags. It's unlikely that a vertex buffer would serve as something else,
            but additionally, you may combine it with <see cref="F:SharpDX.Direct3D11.BindFlags.StreamOutput"/> for recycled usage.</param>
            <param name="access">Allows reading/writing to the buffer by the CPU.</param><param name="options">Additional options.</param>
        </member>
        <member name="P:Ensoftener.DirectX.GDX.SizableBuffer.Length">
            <summary>Amount of numbers to fit per vertex. A number is 4 bytes long, but 64-bit doubles can be spaced over two numbers.</summary>
        </member>
        <member name="M:Ensoftener.DirectX.GDX.SizableBuffer.Compile3D(System.Boolean,SharpDX.Direct3D11.BindFlags,SharpDX.Direct3D11.CpuAccessFlags,SharpDX.Direct3D11.ResourceOptionFlags)">
            <summary>Compiles itself as a Direct3D vertex buffer. <b>Remember to dispose!</b></summary>
            <param name="dynamic">Allows editing the buffer after it was compiled (slower).</param>
            <param name="access">Allows reading/writing to the buffer by the CPU.</param><param name="options">Additional options.</param>
        </member>
        <member name="M:Ensoftener.DirectX.GDX.SizableBuffer.Compile3DAsConstantBuffer(System.Boolean,SharpDX.Direct3D11.CpuAccessFlags,SharpDX.Direct3D11.ResourceOptionFlags)">
            <summary>Compiles itself as a Direct3D constant buffer, which can be passed to the individual 3D stages. <b>Remember to dispose!</b></summary>
            <param name="dynamic">Allows editing the buffer after it was compiled (slower).</param>
            <param name="access">Allows reading/writing to the buffer by the CPU.</param><param name="options">Additional options.</param>
        </member>
        <member name="T:Ensoftener.DirectX.PVShaderBase">
            <summary>A more or less functional shader effect inherited from <see cref="T:SharpDX.Direct2D1.CustomEffectBase"/>. You can modify its input count, constant buffer, its nodes,
            splittable data stream designed for passing vertices and the shader's semantics.</summary>
            <remarks>The effect consists of a vertex shader and a pixel shader. The vertex shader stage deforms the bitmap via a triangular mesh and the pixel shader stage
            can create additional color filters on top of the deformed triangles. Either can be turned off in the constructor, but disabling both may result in errors.
            <br/>The vertex shader is still WIP - 100% functionality isn't guaranteed.</remarks>
        </member>
        <member name="M:Ensoftener.DirectX.PVShaderBase.#ctor(System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Guid},System.Boolean,System.Boolean)">
            <summary>Initializes a new custom effect.</summary>
            <param name="psGuid">The GUID of the effect. Each GUID has one pixel shader assigned to it,
            hence the <see cref="T:Ensoftener.DirectX.CloneablePixelShader"/>'s ability to have different pixel shaders.</param>
            <param name="vsGuid">The GUID of the vertex shader.</param>
            <param name="vbGuid">The GUID of the vertex buffer. The vertex buffer contains values that will be passed to the shader, not the shader itself.</param>
            <param name="usePS">Enable the pixel shader stage in this effect.</param>
            <param name="useVS">Enable the vertex shader stage in this effect.</param>
        </member>
        <member name="P:Ensoftener.DirectX.PVShaderBase.VertexCount">
            <summary>The amount of vertices processed by the vertex shader. The amount must be a multiple of 3, as every 3 vertices form a single face.</summary>
        </member>
        <member name="P:Ensoftener.DirectX.PVShaderBase.VsInBuffer">
            <summary>A stream of structs assigned to semantics in vertex shaders. Streams can be created off of arrays via
            <see cref="M:SharpDX.DataStream.Create``1(``0[],System.Boolean,System.Boolean,System.Int32,System.Boolean)"/> (set <b>canRead</b> and <b>canWrite</b> to true!).
            The extra int indicates the size of each struct.</summary>
            <remarks>A vertex buffer in vertex shaders works differently than a constant buffer in pixel shaders (if you're looking for an eqiuvalent, that's <b>b1</b>).
            Here, each vertex will get one struct in the array and recieve it via semantics in its main method. <see cref="P:Ensoftener.DirectX.PVShaderBase.InputElements"/> decides what parts
            of the struct will be assigned to each semantic.<br/><br/>While the struct can be literally anything, certain restrictions apply:
            <list type="number"><item>The struct must contain only value types (such as <see cref="T:SharpDX.Vector2"/>).</item>
            <item>All structs must be the same size, because the stream progresses by a fixed integer (second output) and would become offset.</item></list></remarks>
        </member>
        <member name="P:Ensoftener.DirectX.PVShaderBase.InputElements">
            <summary>Returns an array of semantics that will be assigned to a part of each struct from <see cref="P:Ensoftener.DirectX.PVShaderBase.VsInBuffer"/>. The offset of an element specifies
            the offset of a struct's s region that's assigned, in bytes. The format specifies what type will be assigned to the semantic.</summary>
            <remarks>For example, if <see cref="P:Ensoftener.DirectX.PVShaderBase.VsInBuffer"/> contains structs with 8 floats each and there's an
            <see cref="T:SharpDX.Direct2D1.InputElement"/> named "ABC" with an offset of 16 and format of <see cref="F:SharpDX.DXGI.Format.R32G32B32_Float"/>,
            the vertex shader will recieve the struct's 5th, 6th and 7th float as a float3 under the ABC semantic.</remarks>
        </member>
        <member name="M:Ensoftener.DirectX.PVShaderBase.ReloadVertexBuffer(System.Boolean)">
            <summary>Updates the vertex buffer according to <see cref="P:Ensoftener.DirectX.PVShaderBase.VsInBuffer"/>.</summary>
            <param name="sameShader">Reloads the same .cso file as before (otherwise uses <see cref="P:Ensoftener.DirectX.GDX.NextVertexShader"/>.</param>
        </member>
        <member name="T:Ensoftener.DirectX.CloneablePixelShader">
            <summary>A shader with no constant buffer, no inside effects and 1 texture input.
            Its GUID is different for every instance, which means it can load a different shader every time.</summary>
        </member>
        <member name="T:Ensoftener.GShared">
            <summary>Extensions, Win32 calls and common methods shared across DirectX and Vulkan.</summary>
        </member>
        <member name="T:Ensoftener.GShared.SideLoop">
            <summary>A loop separated from the main rendering method. The loop will run ONLY after <b><see cref="M:Ensoftener.DirectX.GDX.Run(System.Action)"/></b> has started.</summary>
        </member>
        <member name="P:Ensoftener.GShared.SideLoop.Name">
            <summary>The name of the thread that will appear on the debugger.</summary>
        </member>
        <member name="P:Ensoftener.GShared.SideLoop.RefreshRate">
            <summary>The loop's refresh rate, in miliseconds. Accepts up to 4 decimal numbers. Default is 16.6667 ms.</summary>
        </member>
        <member name="P:Ensoftener.GShared.SideLoop.UpdateInput">
            <summary>Updates mouse+keyboard input in this thread. This is very important to look after, as updating input while another thread
            is running can have consequences if the other thread relies on this input.</summary>
        </member>
        <member name="P:Ensoftener.GShared.SideLoop.UpdateMethod">
            <summary>The method to call each update.</summary>
        </member>
        <member name="M:Ensoftener.GShared.Quit">
            <summary>Schedules a shutdown of the window. After the current rendering method ends, all sounds are stopped and components deleted.</summary>
            <remarks>Windows doesn't allow for different threads to close a single window, which means the closure needs to be scheduled for later
            and then executed by the window thread.</remarks>
        </member>
        <member name="M:Ensoftener.GShared.AddIfMissing``1(System.Collections.Generic.List{``0},``0)">
            <summary>Adds an object to the end of the <seealso cref="T:System.Collections.Generic.List`1"/> only if the object isn't already present.</summary>
        </member>
        <member name="M:Ensoftener.GShared.Clone``1(System.Collections.Generic.List{``0})">
            <summary>Copies all contents of a <seealso cref="T:System.Collections.Generic.List`1"/> into a new <seealso cref="T:System.Collections.Generic.List`1"/>.</summary>
        </member>
        <member name="M:Ensoftener.GShared.OneItem``1(System.Collections.Generic.List{``0},``0)">
            <summary>Clears a <seealso cref="T:System.Collections.Generic.List`1"/> and adds one item.</summary>
        </member>
        <member name="P:Ensoftener.Input.Input.KeyboardChars">
            <summary>The character inputs of the keyboard. Null if there are none.</summary>
        </member>
        <member name="P:Ensoftener.Input.Input.UseFakeInputs">
            <summary>Accept faking keyboard and mouse input with <b><see cref="M:Ensoftener.Input.Input.PressKey(System.Windows.Forms.Keys)"/></b>, <b><see cref="M:Ensoftener.Input.Input.UnpressKey(System.Windows.Forms.Keys)"/></b>,
            <b><see cref="M:Ensoftener.Input.Input.MouseButton.HoldDown"/></b>, <b><see cref="M:Ensoftener.Input.Input.MouseButton.StopHoldingDown"/></b> and <b><see cref="M:Ensoftener.Input.Input.MouseButton.Click"/></b>.</summary>
        </member>
        <member name="T:Ensoftener.Input.XboxInput">
            <summary>The class that provides everything necessary for working with Xbox controllers.</summary>
        </member>
        <member name="P:Ensoftener.Input.XboxInput.XboxController.LT">
            <summary>Gets the tilt of the left trigger (from 0 to 255).</summary>
        </member>
        <member name="P:Ensoftener.Input.XboxInput.XboxController.RT">
            <summary>Gets the tilt of the right trigger (from 0 to 255).</summary>
        </member>
        <member name="P:Ensoftener.Input.XboxInput.XboxController.LeftJoystickX">
            <summary>Gets the X position of the left joystick (from -32768 to 32767).</summary>
        </member>
        <member name="P:Ensoftener.Input.XboxInput.XboxController.LeftJoystickY">
            <summary>Gets the Y position of the left joystick (from -32768 to 32767).</summary>
        </member>
        <member name="P:Ensoftener.Input.XboxInput.XboxController.RightJoystickX">
            <summary>Gets the X position of the right joystick (from -32768 to 32767).</summary>
        </member>
        <member name="P:Ensoftener.Input.XboxInput.XboxController.RightJoystickY">
            <summary>Gets the Y position of the right joystick (from -32768 to 32767).</summary>
        </member>
        <member name="M:Ensoftener.Input.XboxInput.XboxController.Vibrate(System.UInt16,System.UInt16)">
            <summary>Vibrates the controller infinitely (until set to 0).</summary>
            <param name="left">The strength of the motor on the left side, from 0 to 65535.</param>
            <param name="right">The strength of the motor on the right side, from 0 to 65535. The right motor vibrates more "smoothly" than the left motor.</param>
            <remarks>Not all values actually influence the strength, the motors have only several steps of vibration intensity.</remarks>
        </member>
        <member name="P:Ensoftener.Input.XboxInput.Controller1">
            <summary>The first controller that was plugged in.</summary>
        </member>
        <member name="P:Ensoftener.Input.XboxInput.Controller2">
            <summary>The second controller that was plugged in.</summary>
        </member>
        <member name="P:Ensoftener.Input.XboxInput.Controller3">
            <summary>The third controller that was plugged in.</summary>
        </member>
        <member name="P:Ensoftener.Input.XboxInput.Controller4">
            <summary>The fourth controller that was plugged in.</summary>
        </member>
        <member name="P:Ensoftener.Sound.ISoundGeneric.Volume">
            <summary>Volume of the sound between 0 and 1.</summary>
        </member>
        <member name="P:Ensoftener.Sound.ISoundGeneric.Speed">
            <summary>Speed of the sound, without changed pitch. 1 is normal.</summary>
        </member>
        <member name="P:Ensoftener.Sound.ISoundGeneric.Position">
            <summary>Position of the sound player, in seconds.</summary>
        </member>
        <member name="P:Ensoftener.Sound.ISoundGeneric.Balance">
            <summary>Balance of the sound. -1 is on the left speaker, 1 is on the right speaker.</summary>
        </member>
        <member name="P:Ensoftener.Sound.ISoundGeneric.Loop">
            <summary>Looping of the sound.</summary>
        </member>
        <member name="P:Ensoftener.Sound.ISoundGeneric.Length">
            <summary>Length of the sound, in seconds.</summary>
        </member>
        <member name="T:Ensoftener.Sound.WMPSound">
            <summary>A simplified version of <see cref="T:WMPLib.WindowsMediaPlayer"/> that's easier to understand.
            You also don't need to include the WMPLib namespace which would normally require specifying
            <b>&lt;UseWindowsForms&gt;true&lt;/UseWindowsForms&gt;</b> in your .csproj file.</summary>
        </member>
        <member name="P:Ensoftener.Sound.WMPSound.FilePath">
            <summary>The location of the sound. It can be a local file or a website URL.</summary>
            <remarks>On Chrome, website sound file will appear as a black page with a small player in the middle. If that's the case, then you've got the sound's URL.</remarks>
        </member>
        <member name="P:Ensoftener.Sound.WMPSound.Volume">
            <inheritdoc/>
        </member>
        <member name="P:Ensoftener.Sound.WMPSound.Speed">
            <inheritdoc/>
        </member>
        <member name="P:Ensoftener.Sound.WMPSound.Position">
            <inheritdoc/>
        </member>
        <member name="P:Ensoftener.Sound.WMPSound.Balance">
            <remarks><b>This value does not work in this class.</b></remarks>
        </member>
        <member name="P:Ensoftener.Sound.WMPSound.Loop">
            <inheritdoc/>
        </member>
        <member name="P:Ensoftener.Sound.WMPSound.Metadata">
            <summary>Gets the song's metadata. This method requests all possible keys, so at the end you might get a dictionary of 100 empty keyvalues.</summary>
        </member>
        <member name="P:Ensoftener.Sound.WMPSound.Length">
            <summary>Length of the sound, in seconds.</summary><remarks>This value only works when the sound is playing.</remarks>
        </member>
        <member name="M:Ensoftener.Sound.WMPSound.#ctor(System.String)">
            <exception cref="T:System.IO.FileNotFoundException"/>
        </member>
        <member name="T:Ensoftener.Sound.WPFSound">
            <summary>A variant of <see cref="T:System.Windows.Media.MediaPlayer"/> that's ported from WPF to Windows Forms.
            You also don't need to specify <b>&lt;UseWPF&gt;true&lt;/UseWPF&gt;</b> in your .csproj file.</summary>
        </member>
        <member name="P:Ensoftener.Sound.WPFSound.FilePath">
            <summary>The location of the sound. It can be a local file or a website URL.</summary>
            <remarks>On Chrome, website sound file will appear as a black page with a small player in the middle. If that's the case, then you've got the sound's URL.</remarks>
        </member>
        <member name="P:Ensoftener.Sound.WPFSound.Volume">
            <inheritdoc/>
        </member>
        <member name="P:Ensoftener.Sound.WPFSound.Speed">
            <inheritdoc/>
        </member>
        <member name="P:Ensoftener.Sound.WPFSound.Position">
            <inheritdoc/>
        </member>
        <member name="P:Ensoftener.Sound.WPFSound.Balance">
            <inheritdoc/>
        </member>
        <member name="P:Ensoftener.Sound.WPFSound.Loop">
            <inheritdoc/>
        </member>
        <member name="P:Ensoftener.Sound.WPFSound.Length">
            <inheritdoc/>
        </member>
        <member name="M:Ensoftener.Sound.WPFSound.#ctor(System.Uri)">
            <exception cref="T:System.IO.FileNotFoundException"/>
        </member>
        <member name="M:Ensoftener.Sound.WPFSound.#ctor(System.String)">
            <exception cref="T:System.IO.FileNotFoundException"/>
        </member>
        <member name="P:Ensoftener.Sound.CSCSound.Volume">
            <inheritdoc/>
        </member>
        <member name="P:Ensoftener.Sound.CSCSound.Speed">
            <inheritdoc/>
        </member>
        <member name="P:Ensoftener.Sound.CSCSound.Position">
            <inheritdoc/>
        </member>
        <member name="P:Ensoftener.Sound.CSCSound.Balance">
            <inheritdoc/>
        </member>
        <member name="P:Ensoftener.Sound.CSCSound.Loop">
            <inheritdoc/>
        </member>
        <member name="P:Ensoftener.Sound.CSCSound.Length">
            <inheritdoc/>
        </member>
        <member name="M:Ensoftener.Sound.CSCSound.#ctor(System.String,System.Boolean,System.Int32,System.Double,System.Int32)">
            <exception cref="T:System.IO.FileNotFoundException"/><exception cref="T:System.NotSupportedException"/>
        </member>
        <member name="M:Ensoftener.Sound.CSCSound.GetModifierInput">
            <summary>Plug this into the beginning of your sound modifier chain.</summary>
        </member>
        <member name="M:Ensoftener.Sound.CSCSound.SetOutputModifier(CSCore.ISampleSource)">
            <summary>Inserts a modifier before the final sound output. Can be the end of a larger modifier chain.</summary>
        </member>
        <member name="M:Ensoftener.Sound.CSCSound.SetOutputModifier(CSCore.IWaveSource)">
            <summary>Inserts a modifier before the final sound output. Can be the end of a larger modifier chain.</summary>
        </member>
        <member name="T:Ensoftener.Sound.CSCSound.ModifierBase">
            <summary>Not designed for instancing. Use <see cref="T:Ensoftener.Sound.CSCSound.Modifier"/> or <see cref="T:Ensoftener.Sound.CSCSound.ModifierAdvanced"/> instead.</summary>
        </member>
        <member name="M:Ensoftener.Sound.CSCSound.ModifierBase.#ctor(CSCore.ISampleSource)">
            <summary>To plug in the sound source or another modifier, put <see cref="M:Ensoftener.Sound.CSCSound.GetModifierInput"/> in the input or the modifier you want to plug in.</summary>
        </member>
        <member name="T:Ensoftener.Sound.CSCSound.Modifier">
            <summary>Custom operator that modifies sound waves. <b>Must be disposed.</b></summary>
        </member>
        <member name="M:Ensoftener.Sound.CSCSound.Modifier.#ctor(CSCore.ISampleSource)">
            <inheritdoc/>
        </member>
        <member name="P:Ensoftener.Sound.CSCSound.Modifier.Operator">
            <summary>Modifies every sound wave that's being played, using both left and right channel as inputs and outputs.
            If the sound has a single channel, both inputs will be the same.</summary>
        </member>
        <member name="T:Ensoftener.Sound.CSCSound.ModifierAdvanced">
            <summary>Similarly to <see cref="T:Ensoftener.Sound.CSCSound.Modifier"/>, modifies sound waves that are being played, except that this also recieves all of the streaming data,
            including the direct access to the array of samples. <b>Also must be disposed.</b></summary>
            <remarks>To implement a working modifier, create a for loop that starts at the offset and ends at offset + count.
            That way, you modify every relevant sample that actually plays in the speaker.</remarks>
        </member>
        <member name="T:Ensoftener.Sound.CSCSound.ModifierAdvanced.InputData">
            <summary>Contains information about the audio stream.</summary>
        </member>
        <member name="F:Ensoftener.Sound.CSCSound.ModifierAdvanced.InputData.Buffer">
            <summary>The array of samples to be modified for this frame. Because the modifier is called every latency interval,
            the array's length is usually the sample rate multiplied by latency (44100 * 0.1s = 4410).</summary>
        </member>
        <member name="M:Ensoftener.Sound.CSCSound.ModifierAdvanced.#ctor(CSCore.ISampleSource)">
            <inheritdoc/>
        </member>
        <member name="F:Ensoftener.Sound.CSCSound.ModifierMultiInput.InputData.Sources">
            <summary>A list off buffers from all inputs, in the order they were added.</summary>
        </member>
        <member name="F:Ensoftener.Sound.CSCSound.ModifierMultiInput.InputData.Output">
            <summary>The output buffer. These values will be passed on to the next modifier or the audio output.</summary>
        </member>
        <member name="P:Ensoftener.Sound.CSCSound.ModifierMultiInput.Operator">
            <summary>The operator that will process the sound input.</summary>
        </member>
        <member name="T:Ensoftener.Sound.CSCSound.PresetMod_Filter">
            <summary>Improved version of CSCore's filter that supports more channels.</summary>
        </member>
        <member name="M:Ensoftener.Sound.CSCSound.PresetMod_Filter.#ctor(CSCore.ISampleSource,System.Func{CSCore.DSP.BiQuad})">
            <summary>Creates a new modifier using the specified filter.</summary><param name="source">The sound input.</param>
            <param name="filter">A method that returns the filter. Example: <code>() => new CSCore.DSP.LowpassFilter(22050, 1000)</code></param>
        </member>
        <member name="T:Ensoftener.SvgImage">
            <summary>A SVG image that can be modified at runtime.</summary>
            <remarks>If you're planning to apply position, rotation and scale to your SVG, make sure that all shapes in the SVG are grouped by &lt;g&gt; elements.
            Some editors don't group them by default, in which case you have to group them. On the other hand, make sure the editor didn't already apply a transform to the groups,
            because that's going to be overriden.</remarks>
        </member>
        <member name="P:Ensoftener.SvgImage.UpdateIfOutdated">
            <summary>Rebuilds the SVG everytime the Outdated is set to true.</summary>
        </member>
        <member name="P:Ensoftener.SvgImage.Outdated">
            <summary>Direct2D-controlled SVG elements are less accessible than in a normal XML parser, and therefore can go out of sync.
            This flag indicates that the SVG needs to be recreated.</summary>
        </member>
        <member name="P:Ensoftener.SvgImage.X">
            <summary>X position of the SVG.</summary>
        </member>
        <member name="P:Ensoftener.SvgImage.Y">
            <summary>Y position of the SVG.</summary>
        </member>
        <member name="P:Ensoftener.SvgImage.Rotation">
            <summary>Rotation of the SVG, clockwise, in degrees.</summary>
        </member>
        <member name="P:Ensoftener.SvgImage.Width">
            <summary>Width <b>multiplier</b> of the SVG.</summary>
        </member>
        <member name="P:Ensoftener.SvgImage.Height">
            <summary>Height <b>multiplier</b> of the SVG.</summary>
        </member>
        <member name="P:Ensoftener.SvgImage.Matrix">
            <summary>Transform matrix of the SVG. This applies on top of the other translations.</summary>
        </member>
        <member name="M:Ensoftener.SvgImage.#ctor(SharpDX.Direct2D1.DeviceContext,System.String,System.Boolean)">
            <summary>Creates an SVG image from a file or an XML string.</summary>
            <param name="input">The file path or XML string.</param>
            <param name="fromFile">Determines whether to read from a file or from the string itself.</param>
        </member>
        <member name="M:Ensoftener.SvgImage.Rebuild">
            <summary>Recreates the SVG image. See the description of the <b><seealso cref="P:Ensoftener.SvgImage.Outdated"/></b> property for why this needs to be done.
            <br/>This method is automatically called when <b><seealso cref="P:Ensoftener.SvgImage.UpdateIfOutdated"/></b> is set to true.</summary>
        </member>
        <member name="P:Ensoftener.SvgImage.SvgElement1.Attributes">
            <summary>Gets all attribute names that exist in this element.</summary>
        </member>
        <member name="M:Ensoftener.SvgImage.SvgElement1.DissectAttribute(System.String,System.Boolean)">
            <summary>Some elements may contain an attribute (such as "style") that packs multiple attributes into one. This method dissects it back.</summary>
            <param name="key">The attribute to be dissected.</param>
            <param name="overrideExisting">Override existing attributes by the new and dissected ones.</param>
            <remarks>This method outdates the image.</remarks>
        </member>
        <member name="P:Ensoftener.SvgImage.SvgElement1.Item(System.String)">
            <summary>Gets or sets an attribute by its name.</summary>
            <remarks>This method outdates the image.</remarks>
        </member>
        <member name="P:Ensoftener.SvgImage.SvgElement1.Item(System.String,System.String)">
            <summary>Gets an attribute by its name and returns <paramref name="defaultValue"/> if nothing is found.</summary>
            <remarks>If you're trying to get a shape's coordinates, you might want to use this with <paramref name="defaultValue"/> set to 0.
            Some SVG editors like Boxy leave out this attribute if the shape is located at (0, 0) and same thing could happen in other cases as well.</remarks>
        </member>
        <member name="T:Ensoftener.Vulkan2D.GVK">
            <summary>The class containing everything necessary to run a Vulkan 2D window.</summary>
        </member>
        <member name="P:Ensoftener.Vulkan2D.GVK.UpdateInputOnRender">
            <summary>Updates mouse+keyboard input in the main render thread. This is very important to look after, as updating input while another thread
            is running can have consequences if the other thread relies on this input.</summary>
        </member>
        <member name="P:Ensoftener.Vulkan2D.GVK.RenderMethod">
            <summary>The main render loop of the Vulkan window. The device is necessary for creating more surfaces and the surface is the window's canvas.</summary>
        </member>
        <member name="P:Ensoftener.Vulkan2D.GVK.VulkanForm.Text">
            <summary>The window title.</summary>
        </member>
    </members>
</doc>
