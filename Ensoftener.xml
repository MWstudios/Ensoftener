<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ensoftener</name>
    </assembly>
    <members>
        <member name="T:Ensoftener.ComputeShaderBase">
            <summary>A compute shader effect inherited from <seealso cref="T:SharpDX.Direct2D1.CustomEffectBase"/>. You can modify its input count, constant buffer and its nodes.</summary>
            <remarks><b>Requires EnsoftenerCpp32.dll or EnsoftenerCpp64.dll in to be put in your program directory.</b></remarks>
        </member>
        <member name="M:Ensoftener.ComputeShaderBase.#ctor(System.Guid)">
            <summary>Initializes a new custom effect.</summary>
            <param name="guid">The GUID of the effect. Each GUID has one compute shader assigned to it.</param>
        </member>
        <member name="M:Ensoftener.ComputeShaderBase.CalculateThreadgroups(SharpDX.Mathematics.Interop.RawRectangle)">
            <summary>The amount of tiles of the image to render. The tile size is specified by the [numthreads] attribute in the compute shader, in pixels.</summary>
            <remarks>If your tiles don't cover the whole image, only a portion of the image will render.</remarks>
        </member>
        <member name="T:Ensoftener.Global">
            <summary>The class containing everything necessary, from Direct2D components to new and useful DeviceContext methods.</summary>
        </member>
        <member name="F:Ensoftener.Global.BitmapProperties">
            <summary>The bitmap properties used for rendering. If you're creating a new bitmap, use these as a parameter.</summary>
        </member>
        <member name="P:Ensoftener.Global.FinalDC">
            <summary>The final device context that renders on screen, and the only one that uses byte color depth.
            Updates after <b><see cref="M:Ensoftener.Global.EndRender"/></b> is called.</summary>
            <remarks>If you want to take a screenshot of the screen and convert it into a GDI bitmap, use <b><see cref="M:Ensoftener.Global.GetScreenCPURead(SharpDX.Direct2D1.DeviceContext,System.Nullable{SharpDX.Rectangle},System.Nullable{SharpDX.Point})"/></b> on this context
            for the fastest performance. If you were to convert any context from <b><see cref="P:Ensoftener.Global.Setups"/></b> to GDI, it would take much longer, as the other contexts use
            <b><see cref="F:SharpDX.DXGI.Format.R32G32B32A32_Float"/></b>. In that case, the library would cast every individual float from the screen to a byte,
            which takes about half a second. Since the final context's pixel format is <b><see cref="F:SharpDX.DXGI.Format.B8G8R8A8_UNorm"/></b>, it's the easiest and fastest to copy.</remarks>
        </member>
        <member name="P:Ensoftener.Global.SwapChainDescription">
            <summary><b><see cref="P:Ensoftener.Global.SwapChain"/></b>'s creation specs (in case you need them).</summary>
        </member>
        <member name="P:Ensoftener.Global.ShaderFile">
            <summary>A .cso file that will be loaded by every <b>pixel or compute shader</b> created from now on.
            One shader class can have different pixel shaders for every instance.</summary>
        </member>
        <member name="P:Ensoftener.Global.VertexShaderFile">
            <summary>A .cso file that will be loaded by every <b>vertex shader</b> created from now on.
            One shader class can have different vertex shaders for every instance.</summary>
        </member>
        <member name="P:Ensoftener.Global.D2DFactory">
            <summary>The class used for registering your custom effects.</summary><remarks>Based on D2DDevice.</remarks>
        </member>
        <member name="P:Ensoftener.Global.D2DDevice">
            <remarks>Based on D3DDevice.</remarks>
        </member>
        <member name="P:Ensoftener.Global.D3DDevice">
            <remarks>Based either on a DXGIFactory or can be freely created.</remarks>
        </member>
        <member name="P:Ensoftener.Global.SwapChain">
            <remarks>Based on D3DDevice and a DXGIFactory.</remarks>
        </member>
        <member name="P:Ensoftener.Global.DrawingSetup.DC">
            <summary>The DeviceContext used for rendering everything, probably the most used class of them all.</summary><remarks>Based on D2DDevice.</remarks>
        </member>
        <member name="P:Ensoftener.Global.DrawingSetup.RenderTarget">
            <summary>The render target of the DeviceContext. Any changes of the target will apply to the device context as well.</summary>
            <remarks>Based on DeviceContext.</remarks>
        </member>
        <member name="P:Ensoftener.Global.DrawingSetup.ResizeWithScreen">
            <summary>Set this context to be resizable with the screen.</summary>
        </member>
        <member name="M:Ensoftener.Global.DrawingSetup.#ctor(System.Nullable{SharpDX.Size2},System.Boolean,System.Boolean)">
            <summary>Adds a new rendering setup.</summary>
            <param name="size">The default size of the device context about to be created. By default it's the window size.</param>
            <param name="resizeWithScreen">This setup resizes with the screen.</param>
            <param name="useFloats">Create the context with 32-bit float color depth (128bpp) instead of 8-bit byte color depth (32bpp).
            <br/><br/>Graphics-wise, floats are more useful, as they allow for colors to be "whiter than white" (or more than 1) and "blacker than black" (negative),
            which is useful for pixel shaders. <br/>Performance-wise, bytes are faster if you're converting to GDI bitmaps often, and require 4 times less memory.
            <br/>You won't need to use bytes unless you need to solve one of these two issues.</param>
        </member>
        <member name="M:Ensoftener.Global.DrawingSetup.RenderScreenShaders(System.Boolean,SharpDX.Direct2D1.Effect[])">
            <summary>Batch renders an array of effects applied to the entire screen.</summary>
            <param name="effects">The array of effects to render.</param>
        </member>
        <member name="P:Ensoftener.Global.DWriteFactory">
            <summary>The class passed as a parameter when rendering text.</summary><remarks>Can be freely created.</remarks>
        </member>
        <member name="P:Ensoftener.Global.WICFactory">
            <summary>The class used for creating SVG's.</summary><remarks>Can be freely created.</remarks>
        </member>
        <member name="P:Ensoftener.Global.ExistingEffects">
            <summary>A list of all effects that were created.</summary> 
        </member>
        <member name="P:Ensoftener.Global.OutputSetup">
            <summary>The setup that will serve as the output and present its contents to the screen.</summary>
        </member>
        <member name="M:Ensoftener.Global.Initialize(System.Int32,System.Nullable{SharpDX.Size2})">
            <summary>Creates all the stuff needed for a basic SharpDX setup. The first device (0th) will be set as output.</summary>
            <param name="parallelDevices">The amount of parallel Direct2D setups to create (for multirendering).
            All components will be accessible from their lists. Cannot be less than 1.</param>
            <param name="sizes">The default size of all device contexts, except for the outputting one. By default it's the window size.</param>
        </member>
        <member name="M:Ensoftener.Global.LoadBitmapFromFile(SharpDX.Direct2D1.DeviceContext,System.String)">
            <summary>Creates a SharpDX Bitmap off of an image file.</summary>
        </member>
        <member name="M:Ensoftener.Global.ConvertGDIToD2DBitmap(SharpDX.Direct2D1.DeviceContext,System.Drawing.Bitmap)">
            <summary>Creates a SharpDX Bitmap off of a GDI+ bitmap.</summary>
        </member>
        <member name="M:Ensoftener.Global.ToGDIBitmap(SharpDX.Direct2D1.Bitmap1)">
            <summary>Creates a GDI+ bitmap off of a SharpDX Bitmap. Very slow if using float colors.</summary>
            <remarks>If you're taking a screenshot, use <b><see cref="P:Ensoftener.Global.FinalDC"/></b> to get the final rendering result.
            <b><see cref="P:Ensoftener.Global.FinalDC"/></b> always uses byte colors, which means the screenshot process is fairly quick.</remarks>
        </member>
        <member name="M:Ensoftener.Global.GetScreenCPURead(SharpDX.Direct2D1.DeviceContext,System.Nullable{SharpDX.Rectangle},System.Nullable{SharpDX.Point})">
            <summary>Copies the device context's render target for further CPU processing (such as saving to a file).</summary>
            <returns>The render target's bitmap. Requires a newer version of DirectX and cannot be read by the GPU.</returns>
        </member>
        <member name="M:Ensoftener.Global.GetScreenGPURead(SharpDX.Direct2D1.DeviceContext,System.Nullable{SharpDX.Rectangle},System.Nullable{SharpDX.Point})">
            <summary>Copies the device context's render target for further GPU processing (such as shaders).</summary>
            <returns>The render target's bitmap. The bitmap cannot be read by the CPU.</returns>
        </member>
        <member name="M:Ensoftener.Global.BeginRender">
            <summary>Put this at the beginning of your render method.</summary>
        </member>
        <member name="M:Ensoftener.Global.EndRender">
            <summary>Put this at the end of your render method.</summary>
        </member>
        <member name="M:Ensoftener.Global.RemoveSetup(System.Int32)">
            <summary>Disposes of a setup and removes it from the lists.</summary>
        </member>
        <member name="M:Ensoftener.Global.AddIfMissing``1(System.Collections.Generic.List{``0},``0)">
            <summary>Adds an object to the end of the <seealso cref="T:System.Collections.Generic.List`1"/> only if the object isn't already present.</summary>
        </member>
        <member name="M:Ensoftener.Global.Clone``1(System.Collections.Generic.List{``0})">
            <summary>Copies all contents of a <seealso cref="T:System.Collections.Generic.List`1"/> into a new <seealso cref="T:System.Collections.Generic.List`1"/>.</summary>
        </member>
        <member name="M:Ensoftener.Global.OneItem``1(System.Collections.Generic.List{``0},``0)">
            <summary>Clears a <seealso cref="T:System.Collections.Generic.List`1"/> and adds one item.</summary>
        </member>
        <member name="M:Ensoftener.Global.ScreenRectangle(SharpDX.Direct2D1.DeviceContext)">
            <summary>Gets the device context's drawing rectangle.</summary>
        </member>
        <member name="T:Ensoftener.Input.XboxInput">
            <summary>The class that provides everything necessary for working with Xbox controllers.</summary>
        </member>
        <member name="P:Ensoftener.Input.XboxInput.XboxController.LT">
            <summary>Gets the tilt of the left trigger (from 0 to 255).</summary>
        </member>
        <member name="P:Ensoftener.Input.XboxInput.XboxController.RT">
            <summary>Gets the tilt of the right trigger (from 0 to 255).</summary>
        </member>
        <member name="P:Ensoftener.Input.XboxInput.XboxController.LeftJoystickX">
            <summary>Gets the X position of the left joystick (from -32768 to 32767).</summary>
        </member>
        <member name="P:Ensoftener.Input.XboxInput.XboxController.LeftJoystickY">
            <summary>Gets the Y position of the left joystick (from -32768 to 32767).</summary>
        </member>
        <member name="P:Ensoftener.Input.XboxInput.XboxController.RightJoystickX">
            <summary>Gets the X position of the right joystick (from -32768 to 32767).</summary>
        </member>
        <member name="P:Ensoftener.Input.XboxInput.XboxController.RightJoystickY">
            <summary>Gets the Y position of the right joystick (from -32768 to 32767).</summary>
        </member>
        <member name="M:Ensoftener.Input.XboxInput.XboxController.Vibrate(System.UInt16,System.UInt16)">
            <summary>Vibrates the controller infinitely (until set to 0).</summary>
            <param name="left">The strength of the motor on the left side, from 0 to 65535.</param>
            <param name="right">The strength of the motor on the right side, from 0 to 65535. The right motor vibrates more "smoothly" than the left motor.</param>
            <remarks>Not all values actually influence the strength, the motors have only several steps of vibration intensity.</remarks>
        </member>
        <member name="P:Ensoftener.Input.XboxInput.Controller1">
            <summary>The first controller that was plugged in.</summary>
        </member>
        <member name="P:Ensoftener.Input.XboxInput.Controller2">
            <summary>The second controller that was plugged in.</summary>
        </member>
        <member name="P:Ensoftener.Input.XboxInput.Controller3">
            <summary>The third controller that was plugged in.</summary>
        </member>
        <member name="P:Ensoftener.Input.XboxInput.Controller4">
            <summary>The fourth controller that was plugged in.</summary>
        </member>
        <member name="T:Ensoftener.PVShaderBase">
            <summary>A more or less functional shader effect inherited from <see cref="T:SharpDX.Direct2D1.CustomEffectBase"/>. You can modify its input count, constant buffer, its nodes,
            splittable data stream designed for passing vertices and the shader's semantics.</summary>
            <remarks>The effect consists of a vertex shader and a pixel shader. The vertex shader stage deforms the bitmap via a triangular mesh and the pixel shader stage
            can create additional color filters on top of the deformed triangles. Either can be turned off in the constructor, but disabling both may result in errors.
            <br/>The vertex shader is still WIP - 100% functionality isn't guaranteed.</remarks>
        </member>
        <member name="M:Ensoftener.PVShaderBase.#ctor(System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Guid},System.Boolean,System.Boolean)">
            <summary>Initializes a new custom effect.</summary>
            <param name="psGuid">The GUID of the effect. Each GUID has one pixel shader assigned to it,
            hence the <see cref="T:Ensoftener.CloneablePixelShader"/>'s ability to have different pixel shaders.</param>
            <param name="vsGuid">The GUID of the vertex shader.</param>
            <param name="vbGuid">The GUID of the vertex buffer. The vertex buffer contains values that will be passed to the shader, not the shader itself.</param>
            <param name="usePS">Enable the pixel shader stage in this effect.</param>
            <param name="useVS">Enable the vertex shader stage in this effect.</param>
        </member>
        <member name="P:Ensoftener.PVShaderBase.VsInBuffer">
            <summary>The stream of values passed to what is <b>VsIn</b> in vertex shaders. Streams can be created off of arrays via
            <see cref="M:SharpDX.DataStream.Create``1(``0[],System.Boolean,System.Boolean,System.Int32,System.Boolean)"/> (set <b>canRead</b> and <b>canWrite</b> to true!).
            The extra int indicates the size of each value.</summary>
            <remarks>A vertex buffer in vertex shaders works differently than a constant buffer in pixel shaders (if you're looking for an eqiuvalent, that's <b>b1</b>).
            Here, the stream will be split into elements using the second int as a "stride". For example, you pass an array of <see cref="T:SharpDX.Vector2"/>
            and <c>sizeof(Vector2)</c> as the integer. Direct2D will then split the stream using that integer and pass each value to the shader individually.</remarks>
        </member>
        <member name="P:Ensoftener.PVShaderBase.InputElements">
            <summary>Returns an array of semantics that will then appear in the <b>VsIn</b> struct.</summary>
        </member>
        <member name="T:Ensoftener.CloneablePixelShader">
            <summary>A shader with no constant buffer, no inside effects and 1 texture input.
            Its GUID is different for every instance, which means it can load a different shader every time.</summary>
        </member>
        <member name="P:Ensoftener.Sound.ISoundGeneric.Volume">
            <summary>Volume of the sound between 0 and 1.</summary>
        </member>
        <member name="P:Ensoftener.Sound.ISoundGeneric.Speed">
            <summary>Speed of the sound, without changed pitch. 1 is normal.</summary>
        </member>
        <member name="P:Ensoftener.Sound.ISoundGeneric.Position">
            <summary>Position of the sound player, in seconds.</summary>
        </member>
        <member name="P:Ensoftener.Sound.ISoundGeneric.Balance">
            <summary>Balance of the sound. -1 is on the left speaker, 1 is on the right speaker.</summary>
        </member>
        <member name="P:Ensoftener.Sound.ISoundGeneric.Loop">
            <summary>Looping of the sound.</summary>
        </member>
        <member name="P:Ensoftener.Sound.ISoundGeneric.Length">
            <summary>Length of the sound, in seconds.</summary>
        </member>
        <member name="T:Ensoftener.Sound.WMPSound">
            <summary>A simplified version of <see cref="T:WMPLib.WindowsMediaPlayer"/> that's easier to understand.
            You also don't need to include the WMPLib namespace which would normally require specifying
            <b>&lt;UseWindowsForms&gt;true&lt;/UseWindowsForms&gt;</b> in your .csproj file.</summary>
        </member>
        <member name="P:Ensoftener.Sound.WMPSound.FilePath">
            <summary>The location of the sound. It can be a local file or a website URL.</summary>
            <remarks>On Chrome, website sound file will appear as a black page with a small player in the middle. If that's the case, then you've got the sound's URL.</remarks>
        </member>
        <member name="P:Ensoftener.Sound.WMPSound.Balance">
            <remarks><b>This value does not work in this class.</b></remarks>
        </member>
        <member name="P:Ensoftener.Sound.WMPSound.Metadata">
            <summary>Gets the song's metadata. This method requests all possible keys, so at the end you might get a dictionary of 100 empty keyvalues.</summary>
        </member>
        <member name="P:Ensoftener.Sound.WMPSound.Length">
            <summary>Length of the sound, in seconds.</summary><remarks>This value only works when the sound is playing.</remarks>
        </member>
        <member name="M:Ensoftener.Sound.WMPSound.#ctor(System.String)">
            <exception cref="T:System.IO.FileNotFoundException"/>
        </member>
        <member name="T:Ensoftener.Sound.WPFSound">
            <summary>A variant of <see cref="T:System.Windows.Media.MediaPlayer"/> that's ported from WPF to Windows Forms.
            You also don't need to specify <b>&lt;UseWPF&gt;true&lt;/UseWPF&gt;</b> in your .csproj file.</summary>
        </member>
        <member name="P:Ensoftener.Sound.WPFSound.FilePath">
            <summary>The location of the sound. It can be a local file or a website URL.</summary>
            <remarks>On Chrome, website sound file will appear as a black page with a small player in the middle. If that's the case, then you've got the sound's URL.</remarks>
        </member>
        <member name="M:Ensoftener.Sound.WPFSound.#ctor(System.Uri)">
            <exception cref="T:System.IO.FileNotFoundException"/>
        </member>
        <member name="T:Ensoftener.Sound.MSDSound">
            <summary>A variant of Microsoft DirectSound's <see cref="T:Microsoft.DirectX.DirectSound.SecondaryBuffer"/>.</summary>
            <remarks><b>Non-functional on .NET 5, use <see cref="T:Ensoftener.Sound.WMPSound"/> or <see cref="T:Ensoftener.Sound.WPFSound"/> instead.</b></remarks>
        </member>
        <member name="P:Ensoftener.Sound.MSDSound.Position">
            <summary>Position of the sound player, in seconds.</summary>
            <remarks>The position is internally converted from seconds to buffer bytes, so it might not be entirely accurate.</remarks>
        </member>
        <member name="P:Ensoftener.Sound.MSDSound.Length">
            <remarks><b>This value does not work in this class.</b></remarks>
        </member>
        <member name="T:Ensoftener.SvgImage">
            <summary>A SVG image that can be modified at runtime.</summary>
            <remarks>If you're planning to apply position, rotation and scale to your SVG, make sure that all shapes in the SVG are grouped by &lt;g&gt; elements.
            Some editors don't group them by default, in which case you have to group them. On the other hand, make sure the editor didn't already apply a transform to the groups,
            because that's going to be overriden.</remarks>
        </member>
        <member name="P:Ensoftener.SvgImage.UpdateIfOutdated">
            <summary>Rebuilds the SVG everytime the Outdated is set to true.</summary>
        </member>
        <member name="P:Ensoftener.SvgImage.Outdated">
            <summary>Direct2D-controlled SVG elements are less accessible than in a normal XML parser, and therefore can go out of sync.
            This flag indicates that the SVG needs to be recreated.</summary>
        </member>
        <member name="P:Ensoftener.SvgImage.X">
            <summary>X position of the SVG.</summary>
        </member>
        <member name="P:Ensoftener.SvgImage.Y">
            <summary>Y position of the SVG.</summary>
        </member>
        <member name="P:Ensoftener.SvgImage.Rotation">
            <summary>Rotation of the SVG, clockwise, in degrees.</summary>
        </member>
        <member name="P:Ensoftener.SvgImage.Width">
            <summary>Width <b>multiplier</b> of the SVG.</summary>
        </member>
        <member name="P:Ensoftener.SvgImage.Height">
            <summary>Height <b>multiplier</b> of the SVG.</summary>
        </member>
        <member name="P:Ensoftener.SvgImage.Matrix">
            <summary>Transform matrix of the SVG. This applies on top of the other translations.</summary>
        </member>
        <member name="M:Ensoftener.SvgImage.#ctor(SharpDX.Direct2D1.DeviceContext,System.String,System.Boolean)">
            <summary>Creates an SVG image from a file or an XML string.</summary>
            <param name="input">The file path or XML string.</param>
            <param name="fromFile">Determines whether to read from a file or from the string itself.</param>
        </member>
        <member name="M:Ensoftener.SvgImage.Rebuild">
            <summary>Recreates the SVG image. See the description of the <b><seealso cref="P:Ensoftener.SvgImage.Outdated"/></b> property for why this needs to be done.
            <br/>This method is automatically called when <b><seealso cref="P:Ensoftener.SvgImage.UpdateIfOutdated"/></b> is set to true.</summary>
        </member>
        <member name="P:Ensoftener.SvgImage.SvgElement1.Attributes">
            <summary>Gets all attribute names that exist in this element.</summary>
        </member>
        <member name="M:Ensoftener.SvgImage.SvgElement1.DissectAttribute(System.String,System.Boolean)">
            <summary>Some elements may contain an attribute (such as "style") that packs multiple attributes into one. This method dissects it back.</summary>
            <param name="key">The attribute to be dissected.</param>
            <param name="overrideExisting">Override existing attributes by the new and dissected ones.</param>
            <remarks>This method outdates the image.</remarks>
        </member>
        <member name="P:Ensoftener.SvgImage.SvgElement1.Item(System.String)">
            <summary>Gets or sets an attribute by its name.</summary>
            <remarks>This method outdates the image.</remarks>
        </member>
        <member name="P:Ensoftener.SvgImage.SvgElement1.Item(System.String,System.String)">
            <summary>Gets an attribute by its name and returns <paramref name="defaultValue"/> if nothing is found.</summary>
            <remarks>If you're trying to get a shape's coordinates, you might want to use this with <paramref name="defaultValue"/> set to 0.
            Some SVG editors like Boxy leave out this attribute if the shape is located at (0, 0) and same thing could happen in other cases as well.</remarks>
        </member>
    </members>
</doc>
